{"name":"Whatsapi","tagline":"A client library to use whatsapp messenger","body":"[![Build Status](https://scrutinizer-ci.com/g/thomasvargiu/TmvWhatsApi/badges/build.png?b=master)](https://scrutinizer-ci.com/g/thomasvargiu/TmvWhatsApi/build-status/master)\r\n[![Code Coverage](https://scrutinizer-ci.com/g/thomasvargiu/TmvWhatsApi/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/thomasvargiu/TmvWhatsApi/?branch=master)\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/thomasvargiu/TmvWhatsApi/badges/quality-score.png?s=c66994bc72499c4771de0e22fb8f257b75685552)](https://scrutinizer-ci.com/g/thomasvargiu/TmvWhatsApi/)\r\n[![Dependency Status](https://www.versioneye.com/user/projects/545f82008683321bc8000036/badge.svg?style=flat)](https://www.versioneye.com/user/projects/545f82008683321bc8000036)\r\n[![Latest Stable Version](https://poser.pugx.org/thomasvargiu/tmv-whatsapi/v/stable.svg)](https://packagist.org/packages/thomasvargiu/tmv-whatsapi)\r\n[![Total Downloads](https://poser.pugx.org/thomasvargiu/tmv-whatsapi/downloads.svg)](https://packagist.org/packages/thomasvargiu/tmv-whatsapi)\r\n[![Latest Unstable Version](https://poser.pugx.org/thomasvargiu/tmv-whatsapi/v/unstable.svg)](https://packagist.org/packages/thomasvargiu/tmv-whatsapi)\r\n[![License](https://poser.pugx.org/thomasvargiu/tmv-whatsapi/license.svg)](https://packagist.org/packages/thomasvargiu/tmv-whatsapi)\r\n\r\n# WhatsAPI\r\n\r\n**Status: development**\r\n\r\n**Last update: 13/11/2014 (See changelist below)**\r\n\r\n**Do not use it in production environment!**\r\n\r\n\r\n## About WhatsAPI\r\n\r\nWhatsAPI is a client library to use Whatsapp services.\r\n\r\nThis is a new project based on the original WhatsAPI:\r\nPlease see [the original project](https://github.com/venomous0x/WhatsAPI)\r\nor the new [WhatsApi Official](https://github.com/mgp25/WhatsAPI-Official)\r\n\r\n## Why a new project?\r\n\r\nThe original WhatsAPI library is not compatible with composer, no PSR compatible, and it's very old.\r\nI want to develop this new library in order to make it more usable.\r\nIf you want to help, just do it :)\r\n\r\n## How to start using this library\r\n\r\n(Everything can be changed in the future)\r\n\r\n### Number registration ###\r\n\r\nFirst, you need an Identity. This string identify a device. You can generate one like this:\r\n```php\r\nuse Tmv\\WhatsApi\\Service\\IdentityService;\r\n\r\n$identityId = IdentityService::generateIdentity();\r\n```\r\n\r\nYou need it everytime to connect to the service, so you should save it to identify your device (you can use ``urlencode``` and ```urldecode``` to save it).\r\n\r\nNow, you can request a code to verify your number:\r\n\r\n```php\r\nuse Tmv\\WhatsApi\\Service\\LocalizationService;\r\nuse Tmv\\WhatsApi\\Service\\IdentityService;\r\nuse Tmv\\WhatsApi\\Service\\PcntlListener;\r\nuse Tmv\\WhatsApi\\Service\\MediaService;\r\nuse Tmv\\WhatsApi\\Entity\\Phone;\r\nuse Tmv\\WhatsApi\\Entity\\Identity;\r\nuse Tmv\\WhatsApi\\Client;\r\nuse Tmv\\WhatsApi\\Options;\r\nuse Zend\\EventManager\\EventInterface;\r\n\r\n// Initializing client\r\n// Creating a service to retrieve phone info\r\n$localizationService = new LocalizationService();\r\n$localizationService->setCountriesPath(__DIR__ . '/data/countries.csv');\r\n$identityService = new IdentityService();\r\n$identityService->setNetworkInfoPath(__DIR__ . '/data/networkinfo.csv');\r\n\r\n// Creating a phone object...\r\n$phone = new Phone(''); // Your number with international prefix (without ```+``` or ```00```)\r\n// Injecting phone properties\r\n$localizationService->injectPhoneProperties($phone);\r\n\r\n$identity = new Identity();\r\n$identity->setNickname($nickname); // Nickname to use for notifications\r\n$identity->setIdentityToken($identityId); // Previously generated identity\r\n$identity->setPhone($phone);\r\n\r\n$res = $identityService->codeRequest($identity);\r\n/*\r\nvar_dump() of $res:\r\narray(4) {\r\n  'status' =>\r\n  string(4) \"sent\"\r\n  'length' =>\r\n  int(6)\r\n  'method' =>\r\n  string(3) \"sms\"\r\n  'retry_after' =>\r\n  int(25205)\r\n}\r\n*/\r\n```\r\n\r\nIf an error occurred, an exception will be thrown. If ok, an sms with a verify code will be sended to your number.\r\nThe second parameter of ```IdentityService::codeRequest()```can accept two strings:\r\n- ```sms```: an SMS will be sent to your number with a code\r\n- ```voice```: you will be called and a voice will tell you the code\r\n\r\nNow you need to insert the code:\r\n\r\n```php\r\n// ...\r\n$res = $identityService->codeRegister($identity, $code);\r\n/*var_dump() of $res:\r\narray(10) {\r\n  'status' =>\r\n  string(2) \"ok\"\r\n  'login' =>\r\n  string(12) \"39123456789\"\r\n  'pw' =>\r\n  string(28) \"xxxxxxxxxxxxxxx=\"\r\n  'type' =>\r\n  string(3) \"new\"\r\n  'expiration' =>\r\n  int(1454786892)\r\n  'kind' =>\r\n  string(4) \"free\"\r\n  'price' =>\r\n  string(8) \"â‚¬ 0,89\"\r\n  'cost' =>\r\n  string(4) \"0.89\"\r\n  'currency' =>\r\n  string(3) \"EUR\"\r\n  'price_expiration' =>\r\n  int(1426348327)\r\n}\r\n*/\r\n```\r\n\r\nThe result is simple, you can understand it. The most important key is ```pw```. This is your password, save it!\r\n\r\n\r\n### Initializing client ###\r\n\r\n```php\r\nuse Tmv\\WhatsApi\\Service\\LocalizationService;\r\nuse Tmv\\WhatsApi\\Entity\\Phone;\r\nuse Tmv\\WhatsApi\\Entity\\Identity;\r\nuse Tmv\\WhatsApi\\Client;\r\nuse Tmv\\WhatsApi\\Service\\PcntlListener;\r\nuse Tmv\\WhatsApi\\Service\\MediaService;\r\nuse Tmv\\WhatsApi\\Options;\r\nuse Zend\\EventManager\\EventInterface;\r\n\r\n// Initializing client\r\n// Creating a service to retrieve phone info\r\n$localizationService = new LocalizationService();\r\n$localizationService->setCountriesPath(__DIR__ . '/data/countries.csv');\r\n\r\n// Creating a phone object...\r\n$phone = new Phone(''); // your phone number with international prefix\r\n// Injecting phone properties\r\n$localizationService->injectPhoneProperties($phone);\r\n\r\n// Creating identity\r\n$identity = new Identity();\r\n$identity->setNickname(''); // your name\r\n$identity->setIdentityToken('');    // your token\r\n$identity->setPassword(''); // your password\r\n$identity->setPhone($phone);\r\n\r\n// Initializing client\r\n$client = new Client($identity);\r\n$client->setChallengeDataFilepath(__DIR__ . '/data/nextChallenge.dat');\r\n\r\n// Attach PCNTL listener to handle signals (if you have PCNTL extension)\r\n// This allow to kill process softly\r\n$pcntlListener = new PcntlListener();\r\n$client->getEventManager()->attach($pcntlListener);\r\n\r\n// Creating MediaService for media messages\r\n$mediaServiceOptions = new Options\\MediaService();\r\n$mediaServiceOptions->setMediaFolder(sys_get_temp_dir());\r\n$mediaServiceOptions->setDefaultImageIconFilepath(__DIR__ . '/data/ImageIcon.jpg');\r\n$mediaServiceOptions->setDefaultVideoIconFilepath(__DIR__ . '/data/VideoIcon.jpg');\r\n$mediaService = new MediaService($mediaServiceOptions);\r\n$client->setMediaService($mediaService);\r\n\r\n// Attaching events...\r\n// ...\r\n\r\n$client->getEventManager()->attach('onConnected', function(EventInterface $e) {\r\n    /** @var Client $client */\r\n    $client = $e->getTarget();\r\n\r\n    // Actions\r\n    // ...\r\n});\r\n\r\n// Connect, login and process messages\r\n// Automatically send presence every 10 seconds\r\n$client->run();\r\n```\r\n\r\n### Sync numbers ###\r\n\r\nBefore to send a message to a number, you have to sync your contacts.\r\n\r\n```php\r\nuse Tmv\\WhatsApi\\Message\\Action;\r\n\r\n$client->getEventManager()->attach('onConnected', function(EventInterface $e) {\r\n    /** @var Client $client */\r\n    $client = $e->getTarget();\r\n    \r\n    $action = new Action\\SyncContacts($client->getIdentity()->getPhone()->getPhoneNumber());\r\n    $action->addNumber('+39123456789');\r\n    $client->send($action);\r\n});\r\n\r\n// Connect, login and process messages\r\n// Automatically send presence every 10 seconds\r\n$client->run();\r\n```\r\n\r\n### Sending a message ###\r\n\r\n```php\r\nuse Tmv\\WhatsApi\\Message\\Action;\r\nuse Tmv\\WhatsApi\\Entity\\MediaFileInterface;\r\n\r\n$number = ''; // number to send message\r\n// Sending composing notification (simulating typing)\r\n$client->send(new Action\\ChatState($number, Action\\ChatState::STATE_COMPOSING));\r\n// Sending paused notification (typing end)\r\n$client->send(new Action\\ChatState($number, Action\\ChatState::STATE_PAUSED));\r\n\r\n// Creating text message action\r\n$message = new Action\\MessageText($identity->getNickname(), $number);\r\n$message->setBody('Hello');\r\n\r\n// OR: creating media (image, video, audio) message (beta)\r\n$mediaFile = $client->getMediaService()\r\n    ->getMediaFileFactory()\r\n    ->factory('/path/to/image.png', MediaFileInterface::TYPE_IMAGE);\r\n$message = new Action\\MessageMedia();\r\n$message->setTo($number)\r\n    ->setMediaFile($mediaFile);\r\n\r\n// Sending message...\r\n$client->send($message);\r\n```\r\n\r\n### Receiving message ###\r\n\r\n```php\r\nuse Tmv\\WhatsApi\\Event\\MessageReceivedEvent;\r\nuse Tmv\\WhatsApi\\Message\\Received;\r\n\r\n// onMessageReceived event\r\n$client->getEventManager()->attach(\r\n    'onMessageReceived',\r\n    function (MessageReceivedEvent $e) {\r\n        $message = $e->getMessage();\r\n        echo str_repeat('-', 80) . PHP_EOL;\r\n        echo '** MESSAGE RECEIVED **' . PHP_EOL;\r\n        echo sprintf('From: %s', $message->getFrom()) . PHP_EOL;\r\n        if ($message->isFromGroup()) {\r\n            echo sprintf('Group: %s', $message->getGroupId()) . PHP_EOL;\r\n        }\r\n        echo sprintf('Date: %s', $message->getDateTime()->format('Y-m-d H:i:s')) . PHP_EOL;\r\n\r\n        if ($message instanceof Received\\MessageText) {\r\n            echo PHP_EOL;\r\n            echo sprintf('%s', $message->getBody()) . PHP_EOL;\r\n        } elseif ($message instanceof Received\\MessageMedia) {\r\n            echo sprintf('Type: %s', $message->getMedia()->getType()) . PHP_EOL;\r\n        }\r\n        echo str_repeat('-', 80) . PHP_EOL;\r\n    }\r\n);\r\n```\r\n\r\n### Debugging ###\r\n\r\nIt's possible to debug attaching events. It's possible to listen all events attaching to '*' event.\r\n\r\n```php\r\nuse Zend\\EventManager\\EventInterface;\r\n\r\n// Debug events\r\n$client->getEventManager()->attach(\r\n    'node.received',\r\n    function (EventInterface $e) {\r\n        $node = $e->getParam('node');\r\n        echo sprintf(\"\\n--- Node received:\\n%s\\n\", $node);\r\n    }\r\n);\r\n$client->getEventManager()->attach(\r\n    'node.send.pre',\r\n    function (EventInterface $e) {\r\n        $node = $e->getParam('node');\r\n        echo sprintf(\"\\n--- Sending Node:\\n%s\\n\", $node);\r\n    }\r\n);\r\n```\r\n\r\n## Public Events ##\r\n\r\n- onMessageReceived (generic event for all messages)\r\n- onMessageTextReceived\r\n- onMessageMediaImageReceived\r\n- onMessageMediaAudioReceived\r\n- onMessageMediaVideoReceived\r\n- onMessageMediaVcardReceived\r\n- onMessageMediaLocationReceived\r\n- onConnected\r\n- onLoginFailed\r\n- onReceiptServer\r\n- onReceiptClient\r\n- onPresenceReceived\r\n- onGroupParticipantAdded\r\n- onGroupParticipantRemoved\r\n- onGetGroupsResult\r\n- onGetGroupInfoResult\r\n\r\n## Changelist ##\r\n\r\n### 13 November 2014 ###\r\n\r\n- Icons generation for images and videos\r\n- Optional dependency suggested in composer for video icons generation\r\n\r\n### 9 November 2014 ###\r\n\r\n- Added MessageMedia action to send image, video and audio messages (generated icons are not supported yet)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}